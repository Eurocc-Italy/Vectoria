#!/leonardo_work/PhDLR_prod/eucc-env/bin/python3
"#!/usr/bin/python3 --> this explodes!"

"VECTORIA: Una terra fantastica dove le informazioni sono organizzate in vettori."

import os, sys
venv_path=os.environ["VIRTUAL_ENV"]
python_version=sys.version[0:4]
lib_path=venv_path + "/lib/python" + python_version + "/site-packages"

# strip it from sys.path
sys.path.remove(lib_path)

# restore it in the right position
sys.path.insert(1,lib_path)

import sys
import logging
import argparse
from argparse import Namespace

from vectoria_lib.common.paths import ETC_DIR
from vectoria_lib.tasks.build_index import build_index
from vectoria_lib.tasks.ask_question import ask_question
from vectoria_lib.io.commandline import create_cl_parser_from_json, cl_convert_to_dict
from vectoria_lib.common.config import Config

"""
logger_name = 'basic'
logger = logging.getLogger(logger_name)
logger.setLevel( "INFO" )
ch = logging.StreamHandler()
logger.addHandler(ch)
"""

def cli():
    parser = argparse.ArgumentParser(description="Main script entry point with multiple behaviors.")

    parser.add_argument(
        '--config',
        type=str,
        required=False,
        default=ETC_DIR/"vectoria_config/default_config.yaml",
        help='Path to the configuration file'
    )
    subparsers = parser.add_subparsers(
        required=True,
        dest='command',
        help='Choose a command (build_index or ask_question)'
    )
    
    parser_create_index_task = subparsers.add_parser('build_index', formatter_class=argparse.RawTextHelpFormatter, help='Run the build_index behavior')
    create_cl_parser_from_json(parser_create_index_task, 'build_index.json')

    parser_ask_question_task = subparsers.add_parser('ask_question', formatter_class=argparse.RawTextHelpFormatter, help='Run the ask_question behavior')
    create_cl_parser_from_json(parser_ask_question_task, 'ask_question.json')

    return parser.parse_args()

def main():
    
    args = cli()
    Config(args.config).update_from_args(args) # <-- override config params with cli params
    args = cl_convert_to_dict(args)

    if args["command"] == 'build_index':
        build_index(args)
    elif args["command"] == 'ask_question':
        ask_question(args)

if __name__ == "__main__":
    main()
