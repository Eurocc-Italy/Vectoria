#!/leonardo_work/PhDLR_prod/eucc-env/bin/python3

"VECTORIA: Una terra fantastica dove le informazioni sono organizzate in vettori."

import os, sys, argparse

def _chec_if_I_can_be_removed():
    if "SLURM_JOB_ID" in os.environ:
        venv_path=os.environ["VIRTUAL_ENV"]
        python_version=sys.version[0:4]
        lib_path=venv_path + "/lib/python" + python_version + "/site-packages"
        # strip it from sys.path
        sys.path.remove(lib_path)
        # restore it in the right position
        sys.path.insert(1,lib_path)
_chec_if_I_can_be_removed()


from vectoria_lib.common.paths import ETC_DIR
from vectoria_lib.common.io.commandline import create_cl_parser_from_json, cl_convert_to_dict
from vectoria_lib.common.config import Config


def cli():
    parser = argparse.ArgumentParser(description="Main script entry point with multiple behaviors.")

    parser.add_argument(
        '--config',
        type=str,
        required=False,
        default=ETC_DIR / "default" / "default_config.yaml",
        help='Path to the configuration file'
    )

    subparsers = parser.add_subparsers(
        required=True,
        dest='command'
    )
    
    _subparser = subparsers.add_parser('build_index', formatter_class=argparse.RawTextHelpFormatter, help='Run the build_index behavior')
    create_cl_parser_from_json(_subparser, 'build_index.json')

    _subparser = subparsers.add_parser('evaluate', formatter_class=argparse.RawTextHelpFormatter, help='Run the evaluate behavior')
    create_cl_parser_from_json(_subparser, 'evaluate.json')

    _subparser = subparsers.add_parser('inference', formatter_class=argparse.RawTextHelpFormatter, help='Run the inference behavior')
    create_cl_parser_from_json(_subparser, 'inference.json')
    
    return parser.parse_args()

def main():
    
    args = cli()
    
    Config().load_config(args.config)
    args = cl_convert_to_dict(args)

    if args["command"] == 'build_index':
        from vectoria_lib.tasks.build_index import build_index
        build_index(**args)

    elif args["command"] == 'evaluate':
        from vectoria_lib.tasks.evaluate import evaluate
        evaluate(**args)
        
    elif args["command"] == 'inference':
        from vectoria_lib.tasks.inference import inference
        inference(**args)

if __name__ == "__main__":
    main()
